" Fast saving
nmap <leader>w :w!<cr>

nnoremap <F5> <ESC>:let b:tmplangtime=v:lc_time<CR>:language time zh_CN.utf8<CR>"=strftime("%x %A")<CR>gP:execute "language time ".b:tmplangtime<CR>o<CR>
nnoremap ,,d  :let b:tmplangtime=v:lc_time<CR>:language time zh_CN.utf8<CR>"=strftime("%x %A")<CR>gP:execute "language time ".b:tmplangtime<CR>o<CR>

" Set ycm navigation
nnoremap <leader>fj :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>fk :YcmCompleter GoToDefinition<CR>
nnoremap <leader>fm :YcmCompleter GoToDefinitionElseDeclaration<CR>

" Temporary solution
nnoremap <leader>ll :echo expand('%:p')<CR>

" Set standard encoding and the standard language
set fileencodings=utf-8,cp936,ucs-bom,default,lation1

" Use Unix as the standard file type
set fileformats=unix,dos,mac

" Unprintable characters setting, but disable listchars
set listchars=tab:,.,extends:>,precedes:<,nbsp:.
set nolist

" Temporarily so, in order to prevent spell-checking of non-syntax files
set nospell

" Disable the use of mouse
set mouse=""

" Don't highlight current line
set nocursorline

" Use for the background
set background=dark

" Set the background color of the LineNumber sidebar
highlight LineNr ctermbg=None

" Open CtrlP in find buffer mode.
nnoremap <leader>p :CtrlPBuffer<CR>

" NerdTree {
    let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr', '\CVS']
" }

" vim-indent-guides {
    let g:indent_guides_enable_on_vim_startup = 0
" }

" ctrlp {
" 关闭当前目录自动切换功能
    let g:ctrlp_working_path_mode = 0
"}

" Set gvim appearance in windows {
if has('win32') || has('win64')
    set guioptions-=r
    source $VIMRUNTIME/delmenu.vim
    source $VIMRUNTIME/menu.vim
    language messages zh_CN.utf-8
    "au GUIEnter * simalt ~x
    set lines=40 columns=150
    winpos 360 255
    map <f11> :call WindowSizeToggle()<CR>

    function! WindowSizeToggle()
        let s:winstatus = libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0)
        if s:winstatus == 0
            set lines=40 columns=150
            winpos 360 255
        endif

    endfunction

endif
"}

" spf13 fastBuffer & fastTabs
let g:spf13_no_fastTabs = 1
map <S-H> :bp<CR>
map <S-L> :bn<CR>

" 自定义命令Show2Tab，用于将vim中的命令输出信息显示到tabnew中
command! -nargs=1 -complete=command Show2Tab redir @* | silent <args> | redir END | tabnew | put *

" 设置vimwiki
" 设置vimwiki文档的折叠
let g:vimwiki_folding='expr'

" 热键[,wc]，用于vimwiki中，修改当前行为一级标题加分割线
" 支持当前行的形式为：? [[TITLE]] 或 #/* TITLE 或 TITLE
nn <leader>wc :s/.*\[\[\\|[#,*] *\\|^//g<CR>:s/\]\].*\\| *$//g<CR>:nohlsearch<CR>0i= <Esc>$a =<CR>----<CR><CR>

" 设置窗口切换快捷键
if exists('g:spf13_no_easyWindows')
    map <Leader>wj <C-W>j<C-W>_
    map <Leader>wk <C-W>k<C-W>_
    map <Leader>wl <C-W>l<C-W>_
    map <Leader>wh <C-W>h<C-W>_
    map <C-J> <C-W>j
    map <C-K> <C-W>k
    map <C-L> <C-W>l
    map <C-H> <C-W>h
endif

" 为cscope设置cscope.out所在路径为前缀构造绝对路径
"set cscoperelative

" 不询问，直接装载.ycm_extra_conf.py
let g:ycm_confirm_extra_conf= 0

" vimwiki配置
let wiki_1 = {}
let wiki_1.path = '~/vimwk'
let wiki_1.path_html = '~/.vimwk1/html/'
let wiki_1.template_path = '~/vimwk/template/'
let wiki_1.template_default = 'default_template'
let wiki_1.template_ext = '.html'
let wiki_1.nested_syntaxes = {'python': 'python', 'c++': 'cpp'}

let wiki_2 = {}
let wiki_2.path = '~/vimmkd'
let wiki_2.path_html = '~/.vimwk2/html/'
let wiki_2.syntax = 'markdown'
let wiki_2.ext = '.md'
let wiki_2.template_path = '~/vimmkd/template/'
let wiki_2.template_default = 'default_template'
let wiki_2.template_ext = '.html'
let wiki_2.custom_wiki2html = '~/.vim/bundle/vimwiki/autoload/vimwiki/customwiki2html.sh'

let g:vimwiki_list = [wiki_1, wiki_2]
autocmd FileType vimwiki setlocal wrap
" 设置tex文件自动换行
autocmd FileType plaintex setlocal wrap

let g:rainbow_conf = {
\	'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
\	'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
\	'operators': '_,_',
\	'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
\	'separately': {
\		'*': {},
\		'tex': {
\			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
\		},
\		'lisp': {
\			'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
\		},
\		'vim': {
\			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
\		},
\		'html': {
\			'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
\		},
\		'css': 0,
\		'vimwiki': 0
\	}
\}

" aireline configuration
"-----------------------
if &runtimepath =~ 'airline'
let g:airline_theme = 'powerlineish'
" 开启buffers扩展栏，并定义垂直分割样式
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

"各机环境不同可能会有字体符号缺失，最好在.vimrc.local中配置
"let g:airline_symbols = get(g:,'airline_symbols',{})
"let g:airline_symbols.maxlinenr = ""
"let g:airline_symbols.linenr = ""
endif

" tagbar configuration
"-----------------------
" Support Vimwiki filetype
let g:tagbar_type_vimwiki = {
    \   'ctagstype':'vimwiki'
    \ , 'kinds':['h:header']
    \ , 'sro':'&&&'
    \ , 'kind2scope':{'h':'header'}
    \ , 'sort':0
    \ , 'ctagsbin':'~/.oauhix-vim/oauhix-vim/others/vwtags.py'
    \ , 'ctagsargs': 'default'
\ }
" Support Markdown filetype
let g:tagbar_type_markdown = {
    \ 'ctagstype': 'markdown',
    \ 'ctagsbin' : '~/.oauhix-vim/submodules/markdown2ctags/markdown2ctags.py',
    \ 'ctagsargs' : '-f - --sort=yes',
    \ 'kinds' : [
        \ 's:sections',
        \ 'i:images'
    \ ],
    \ 'sro' : '|',
    \ 'kind2scope' : {
        \ 's' : 'section',
    \ },
    \ 'sort': 0,
\ }

let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'  
let g:tagbar_sort = 0
